import os
from .bot import Bot
from .tools import log, log_act
from django.conf import settings
from .models import User, Profile, ProfileSearch, ProfileLikes, ActType, LogUsers
from .markup import *
from django.utils.timezone import now
from .abstract import AbstractRegistration
from .bot import Bot



class Registration(AbstractRegistration, Bot):

    @log
    def start_message(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.
        :param Message message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        sticker_path = os.path.join(
            settings.STATIC_ROOT, 'tgbot/images/welcome.webp'
        )

        with open(sticker_path, 'rb') as sticker:
            self.bot.send_sticker(message.chat.id, sticker.read())
        print("--------------------------")
        user, created = User.objects.get_or_create(chat_id=message.chat.id)
        log_act(user, 'start')
        if created or not user.profile.is_registered:
            user.first_name = message.chat.first_name
            user.username = message.chat.username
            user.save()

            text = '<b>–ü—Ä–∏–≤–µ—Ç–∏–∫‚ò∫</b>\n\n'

            Profile.objects.get_or_create(user=user)
            ProfileSearch.objects.get_or_create(user=user)
            ProfileLikes.objects.get_or_create(user=user)

            text += '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Å—Ç–∏ –∞–Ω–∫–µ—Ç—É.\n'

            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(
                text="‚ù§Ô∏è–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∫–µ—Ç—ã",
                callback_data="profile_registration"
            ))

            if not user.username:
                _text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç,' \
                        ' –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —á—Ç–æ–±—ã —Å —Ç–æ–±–æ–π –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Ç–æ –≤–∫–ª—é—á–∏' \
                        ' –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' \
                        ' (–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å -> –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π -> –í—Å–Ω)'
            self.bot.send_message(
                chat_id=message.chat.id,
                text=_text,
                parse_mode='HTML'
            )

            self.bot.send_message(
                chat_id=message.chat.id,
                text=text,
                reply_markup=markup,
                parse_mode='HTML'
            )
        else:
            text = "–ö—É-–∫—ÉüôÇ\n"
            text += "–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —É–∂–µ –µ—Å—Ç—å —É –Ω–∞—Å. –ü–µ—Ä–µ—Ö–æ–¥–∏ –∫ –ø–æ–∏—Å–∫—É\n"
            self.bot.send_message(
                chat_id=message.chat.id,
                text=text,
                reply_markup=gen_main_markup(),
                parse_mode='HTML'
            )

    @log
    def callback_change_profile(self, call):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É —Ü–µ–ø–æ—á–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –∫–∞–∫ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        –î–∞–ª—å–Ω–µ–π—à–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Ü–µ–ø–æ—á–∫–µ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç (is_registered = True)
        :param call: Callback –æ—Ç inline-–∫–ª–∞–≤–∏—à–∏
        :raise User.DoesNotExist: –î–æ—Å—Ç—É–ø –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        """
        try:
            self.bot.edit_message_reply_markup( # –≤–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ —Ç–æ–≥–æ, 
                chat_id=call.from_user.id,      # —á—Ç–æ –ø—Ä–æ–π–¥—ë—Ç 3 –¥–Ω—è –∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ            
                message_id=call.message.message_id
            )

            user = User.objects.get(chat_id=call.from_user.id)
            user.last_use = now()

            if call.data == 'profile_registration':
                self.bot.send_message(
                    chat_id=call.from_user.id,
                    text="–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
                )
                self.bot.register_next_step_handler(call.message, self.process_name_step, user)
                self.bot.answer_callback_query(call.id)
                return

            elif call.data == 'profile_edit_name':
                self.bot.send_message(
                    chat_id=call.from_user.id,
                    text="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
                )
                self.bot.register_next_step_handler(call.message, self.process_name_step, user)
                self.bot.answer_callback_query(call.id)
                return

            elif call.data == 'profile_edit_age':
                self.bot.send_message(
                    chat_id=call.from_user.id,
                    text="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:"
                )
                self.bot.register_next_step_handler(call.message, self.process_age_step, user)
                self.bot.answer_callback_query(call.id)
                return

            elif call.data == 'profile_edit_sex':
                markup = types.ReplyKeyboardMarkup(one_time_keyboard=True,
                                                   resize_keyboard=True)
                markup.add('–ú—É–∂—á–∏–Ω–∞', '–ñ–µ–Ω—â–∏–Ω–∞', '–î—Ä—É–≥–æ–µ')
                self.bot.send_message(
                    chat_id=call.from_user.id,
                    text="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                    reply_markup=markup
                )
                self.bot.register_next_step_handler(call.message, self.process_sex_step, user)
                self.bot.answer_callback_query(call.id)
                return

            elif call.data == 'profile_edit_description':
                self.bot.send_message(
                    chat_id=call.from_user.id,
                    text="–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
                )
                self.bot.register_next_step_handler(call.message,
                                                    self.process_description_step, user)
                self.bot.answer_callback_query(call.id)
                return
            elif call.data == 'profile_edit_avatar':
                self.bot.send_message(
                    chat_id=call.from_user.id,
                    text="–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ:"
                )
                self.bot.register_next_step_handler(call.message, self.process_photo_step,
                                               user)
                self.bot.answer_callback_query(call.id)
                return

            elif call.data == 'profile_edit_active':
                user.profile.is_active = not user.profile.is_active
                user.profile.save()
                log_act(user, 'is_prof_active', str(user.profile.is_active))
                self.show_user_profile(call.message)
                self.bot.answer_callback_query(call.id, '–°—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã –∏–∑–º–µ–Ω–µ–Ω')
                return

        except User.DoesNotExist:
            self.bot.edit_message_text(
                chat_id=call.from_user.id,
                message_id=call.message.message_id,
                text="–í—ã –Ω–µ –∑–∞–≤–µ–ª–∏ –∞–Ω–∫–µ—Ç—É!\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π:\n/start"
            )

    @log
    def process_name_step(self, message, user):
        """–®–∞–≥ –≤ —Ü–µ–ø–æ—á–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–∫–∞–∑–∞–Ω–∏–µ –∏–º–µ–Ω–∏)
        :param Message message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param User user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        """
        name = message.text
        if len(name) > 20:
            self.bot.reply_to(
                message=message,
                text='–í–∞—à–µ –∏–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ 20 —Å–∏–º.'
            )
            self.bot.register_next_step_handler(message, self.process_name_step, user)
            return
        user.profile.name = name
        user.profile.save()
        log_act(user, 'name', name)
        self.bot.send_message(chat_id=message.chat.id, text='–ò–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')
        if user.profile.is_registered:
            self.show_user_profile(message)
        else:
            message = self.bot.reply_to(message, '–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?')
            self.bot.register_next_step_handler(message, self.process_age_step, user)

    @log
    def process_age_step(self, message, user):
        """–®–∞–≥ –≤ —Ü–µ–ø–æ—á–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–∫–∞–∑–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞)
        :param Message message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param User user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        """
        age = message.text
        if not age.isdigit() or not 13 <= int(age) <= 100:
            message = self.bot.reply_to(
                message=message,
                text='–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ –æ—Ç 13 –¥–æ 100'
            )
            self.bot.register_next_step_handler(message, self.process_age_step, user)
            return
        user.profile.age = age
        user.profile.save()
        log_act(user, 'age', age)
        self.bot.send_message(chat_id=message.chat.id, text='–í–æ–∑—Ä–∞—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
        if user.profile.is_registered:
            self.show_user_profile(message)
        else:
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True,
                                               resize_keyboard=True)
            markup.add('–ú—É–∂—á–∏–Ω–∞', '–ñ–µ–Ω—â–∏–Ω–∞', '–î—Ä—É–≥–æ–µ')
            message = self.bot.reply_to(
                message=message,
                text='–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª',
                reply_markup=markup
            )
            self.bot.register_next_step_handler(message, self.process_sex_step, user)

    @log
    def process_sex_step(self, message, user):
        """–®–∞–≥ –≤ —Ü–µ–ø–æ—á–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª–∞)
        :param Message message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param User user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        """
        sex = message.text
        if sex == '–ú—É–∂—á–∏–Ω–∞':
            user.profile.sex = 'M'
            user.profilesearch.sex = 'W'
        elif sex == '–ñ–µ–Ω—â–∏–Ω–∞':
            user.profile.sex = 'W'
            user.profilesearch.sex = 'M'
        elif sex == '–î—Ä—É–≥–æ–µ':
            user.profile.sex = 'O'
            user.profilesearch.sex = 'O'
        else:
            message = self.bot.reply_to(
                message=message,
                text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'
            )
            self.bot.register_next_step_handler(message, self.process_sex_step, user)
            return
        user.profile.save()
        user.profilesearch.save()
        log_act(user, 'sex', sex)
        if user.profile.is_registered:
            self.bot.send_message(
                chat_id=message.chat.id,
                text='–ü–æ–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!',
                reply_markup=gen_main_markup()
            )
        else:
            self.bot.send_message(
                chat_id=message.chat.id,
                text='–ü–æ–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!',
                reply_markup=types.ReplyKeyboardRemove()
            )
            message = self.bot.send_message(
                chat_id=message.chat.id,
                text='–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ –¥–æ 400 —Å–∏–º.',
                reply_markup=types.ReplyKeyboardRemove()
            )
            self.bot.register_next_step_handler(message, self.process_description_step, user)

    @log
    def process_description_step(self, message, user):
        """–®–∞–≥ –≤ —Ü–µ–ø–æ—á–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–∫–∞–∑–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è)
        :param Message message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param User user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        """
        description = message.text
        if len(description) > 400:
            message = self.bot.reply_to(
                message=message,
                text='–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–æ 400 —Å–∏–º.'
            )
            self.bot.register_next_step_handler(message, self.process_description_step,
                                           user)
            return
        user.profile.description = description
        user.profile.save()
        log_act(user, 'description', description)
        self.bot.send_message(
            chat_id=message.chat.id,
            text='–û–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!'
        )
        if user.profile.is_registered:
            self.show_user_profile(message)
        else:
            message = self.bot.reply_to(message, '–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ')
            self.bot.register_next_step_handler(message, self.process_photo_step, user)

    @log
    def process_photo_step(self, message, user):
        """–®–∞–≥ –≤ —Ü–µ–ø–æ—á–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è)
        :param Message message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param User user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        :raise TypeError: –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤ –¢–ì –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–µ —Ñ–æ—Ç–æ
        """
        try:
            file_id = message.photo[-1].file_id
            file = self.bot.get_file(file_id)
            user_avatar = self.bot.download_file(file.file_path)
            save_path = os.path.join(settings.MEDIA_ROOT, 'images/avatars/')
            file_name = f"{user.chat_id}.jpg"
            complete_name = os.path.join(save_path, file_name)

            with open(complete_name, "wb") as img:
                img.write(user_avatar)

            self.bot.send_message(chat_id=message.chat.id, text='–§–æ—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')
            log_act(user, 'photo', complete_name)
            if user.profile.is_registered:
                self.show_user_profile(message)
            else:
                user.profile.is_registered = True
                user.profile.save()
                text = '<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!!!</b> –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n'
                text += '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É\n'
                text += '/profile –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"'
                self.bot.send_message(
                    chat_id=message.chat.id,
                    text=text,
                    reply_markup=gen_main_markup(),
                    parse_mode='HTML'
                )
        except TypeError:
            message = self.bot.reply_to(
                message=message,
                text='–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: PNG/JPG\n(compress/—Å–∂–∞—Ç–æ–µ)'
            )
            self.bot.register_next_step_handler(message, self.process_photo_step, user)
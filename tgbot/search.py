import os
from .bot import Bot
from .tools import log, check_is_registrations, log_act
from django.conf import settings
from .models import User, Profile, ProfileSearch, ProfileLikes
from .markup import *
from django.utils.timezone import now
from .abstract import AbstractSearch


class Search(AbstractSearch, Bot):

    @staticmethod
    def _give_username_or_id(user):
        if user.username:
            return f'–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user.username}'
        else:
            return f'–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <a href="tg://user?id={user.chat_id}">{user.profile.name}</a>'

    @log
    def callback_change_profile_search(self, call):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        :param call: Callback –æ—Ç inline-–∫–ª–∞–≤–∏—à–∏
        :raise User.DoesNotExist: –î–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        """
        try:
            user = User.objects.get(chat_id=call.from_user.id)
            text = markup = None

            if call.data == 'search_age':
                text = '<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–æ–∑–æ–Ω</b>: '
                markup = gen_markup_for_age_search()
                self.bot.answer_callback_query(call.id)
            if call.data.startswith('search_age_'):
                user.profilesearch.age = call.data.split('_')[-1]
                user.profilesearch.unviewed.clear()
                user.profilesearch.save()
                text = self.get_user_profile_search(user)
                markup = gen_markup_for_profile_search()

            if call.data == 'search_sex':
                text = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞'
                markup = gen_markup_for_sex_search()
            if call.data.startswith('search_sex_'):
                user.profilesearch.sex = call.data.split('_')[-1]
                user.profilesearch.unviewed.clear()
                user.profilesearch.save()
                text = self.get_user_profile_search(user)
                markup = gen_markup_for_profile_search()

            if call.data == 'search_reset':
                text = '–°–±—Ä–æ—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π'
                markup = gen_markup_for_profile_search()
                user.profilesearch.unviewed.clear()
                user.profilesearch.viewed.clear()
                user.profilesearch.save()

            self.bot.edit_message_text(
                text=text,
                chat_id=call.from_user.id,
                message_id=call.message.message_id,
                parse_mode='HTML'
            )
            self.bot.edit_message_reply_markup(
                chat_id=call.from_user.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            self.bot.answer_callback_query(call.id)
            return

        except User.DoesNotExist:
            self.bot.edit_message_text(
                chat_id=call.from_user.id,
                message_id=call.message.message_id,
                text="–í—ã –Ω–µ –∑–∞–≤–µ–ª–∏ –∞–Ω–∫–µ—Ç—É!\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π:\n/start"
            )

    @log
    def get_user_profile_search(self, user):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        :param User user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞
        :return: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        :rtype: str
        """
        text = '<i>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞</i>: \n\n'
        text += f'<b>üî¢–í–æ–∑—Ä–∞—Å—Ç: </b>{user.profilesearch.age}\n'
        if user.profilesearch.sex == 'M':
            text += '<b>üöπ–ü–æ–ª: </b> –ú—É–∂—á–∏–Ω–∞\n'
        elif user.profilesearch.sex == 'W':
            text += '<b>üö∫–ü–æ–ª: </b> –ñ–µ–Ω—â–∏–Ω–∞\n'
        elif user.profilesearch.sex == 'O':
            text += '<b>–ü–æ–ª: </b> –î—Ä—É–≥–æ–π\n'
        elif user.profilesearch.sex == 'A':
            text += '<b>–ü–æ–ª: </b> –í—Å–µ\n'

        text += '\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞: '

        return text

    @log
    def get_next_search_profile(self, client):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–∏—Å–∫–∞
        :param User client: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞
        :raise IndexError: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–∏—Å–∫–∞
        """
        try:
            user_id = client.profilesearch.unviewed.pop()
            if client.profile.is_active and client.profile.is_registered:
                self.show_user_profile_likes(client, user_id, '0', '')
            elif not client.profile.is_active:
                self.bot.send_message(
                    chat_id=client.chat_id,
                    text='\n –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π, —Å–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º',
                    parse_mode='HTML'
                )
            elif not client.profile.is_registered:
                self.bot.send_message(
                    chat_id=client.chat_id,
                    text='\n –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /start',
                    parse_mode='HTML'
                )

            client.profilesearch.viewed.append(user_id)
            client.profilesearch.save()
        except IndexError:
            text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–∏–∫–æ–≥–æ <b>–Ω–µ –Ω–∞—à–ª–∏</b>\n'
            text += '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞'
            self.bot.send_message(
                chat_id=client.chat_id,
                text=text,
                parse_mode='HTML'
            )

    @check_is_registrations
    @log
    def bot_message(self, message):
        """–°–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞
        -–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        -–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        -–ü–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–∏—Å–∫–∞
        :param Message message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            if message.chat.type == 'private': # —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç ?
                if message.text == 'üòé–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
                    user = User.objects.get(chat_id=message.chat.id)
                    log_act(user, 'press_my_prof')
                    self.show_user_profile(message)
                if message.text == '‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞':
                    user = User.objects.get(chat_id=message.chat.id)
                    log_act(user, 'press_search_settings')
                    self.bot.send_message(
                        chat_id=user.chat_id,
                        text=self.get_user_profile_search(user),
                        reply_markup=gen_markup_for_profile_search(),
                        parse_mode='HTML'
                    )
                if message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º—É —Ç—ã –Ω—Ä–∞–≤–∏—à—å—Å—è':
                    client = User.objects.get(chat_id=message.from_user.id)
                    log_act(client, 'press_settings')
                    self.get_next_like_profile(client)
                if message.text == 'üîç–ü–æ–∏—Å–∫':
                    client = User.objects.get(chat_id=message.chat.id)
                    if not client.profilesearch.unviewed:
                        start_age, end_age = map(
                            int,
                            client.profilesearch.age.split('-')
                        )
                        if client.profilesearch.sex == 'A':
                            list_users_for_search = User.objects.filter(
                                profile__age__range=(start_age, end_age),
                                profile__is_active=True,
                                profile__is_registered=True,
                            ).exclude(chat_id=client.chat_id).order_by('?')
                        else:
                            list_users_for_search = User.objects.filter(
                                profile__age__range=(start_age, end_age),
                                profile__sex=client.profilesearch.sex,
                                profile__is_active=True,
                                profile__is_registered=True,
                            ).exclude(chat_id=client.chat_id).order_by('?')

                        for user in list_users_for_search:
                            if (user.chat_id not in client.profilesearch.viewed and
                                    user.chat_id not in client.profilesearch.unviewed):
                                client.profilesearch.unviewed.append(user.chat_id)
                        client.profilesearch.save()

                    self.get_next_search_profile(client)
        except User.DoesNotExist:
            self.bot.send_message(
                chat_id=message.chat.id,
                text="–í—ã –Ω–µ –∑–∞–≤–µ–ª–∏ –∞–Ω–∫–µ—Ç—É!\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π:\n/start"
            )

    @log
    def action(self, call):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π: –ª–∞–π–∫–∞ –∏ –¥–∏–∑–ª–∞–π–∫–∞
        :param call: Callback –æ—Ç inline-–∫–ª–∞–≤–∏—à–∏
        """
        pref, flag, user_id = call.data.split()
        # user_id = int(user_id)
        client = User.objects.get(chat_id=call.from_user.id)
        # print('------------', user_id)
        user = User.objects.get(chat_id=user_id)
        client.last_use = now()
        if not client.profile.is_registered:
            self.bot.send_message(
                chat_id=client.chat_id,
                text='–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é',
                parse_mode='HTML'
            )
        elif not client.profile.is_active:
            self.bot.send_message(
                chat_id=client.chat_id,
                text="–í—ã —Å–¥–µ–ª–∞–ª–∏ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π, —Å–¥–µ–ª–∞–π—Ç–µ –µ–µ –∞–∫—Ç–∏–≤–Ω–æ–π"
            )
        elif pref == 'action_like':
            if user_id in client.profilelikes.unviewed:
                text = '–≠—Ç–æ –≤–∑–∞–∏–º–Ω–æ !!!\n'
                markup = types.InlineKeyboardMarkup()
                markup.row_width = 1
                markup.add(
                    types.InlineKeyboardButton(
                        text='üíå –ù–∞–ø–∏—Å–∞—Ç—å\n',
                        url=f'tg://user?id={user.chat_id}'
                    )
                )
                self.bot.send_photo(
                    chat_id=client.chat_id,
                    photo=self.get_user_avatar(user),
                    caption=text + self._give_username_or_id(user),
                    reply_markup=markup,
                    parse_mode='HTML'
                )

                markup = types.InlineKeyboardMarkup()
                markup.row_width = 1
                markup.add(
                    types.InlineKeyboardButton(
                        text='üíå –ù–∞–ø–∏—Å–∞—Ç—å\n',
                        url=f'tg://user?id={client.chat_id}'
                    )
                )
                self.bot.send_photo(
                    chat_id=user.chat_id,
                    photo=self.get_user_avatar(client),
                    caption=text + self._give_username_or_id(client),
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                client.profilelikes.unviewed.remove(user_id)
                client.profilelikes.viewed.append(user_id)
                user.profilelikes.viewed.append(client.chat_id)

                user.profilelikes.save()
                client.profilelikes.save()

            elif user_id in client.profilelikes.viewed:
                text = '–£ –≤–∞—Å —É–∂–µ –±—ã–ª –º—ç—Ç—á\n'
                markup = types.InlineKeyboardMarkup()
                markup.row_width = 1
                markup.add(
                    types.InlineKeyboardButton(
                        text='üíå –ù–∞–ø–∏—Å–∞—Ç—å\n',
                        url=f'tg://user?id={user.chat_id}'
                    )
                )
                self.bot.send_photo(
                    chat_id=client.chat_id,
                    photo=self.get_user_avatar(user),
                    caption=text + self._give_username_or_id(user),
                    reply_markup=markup,
                    parse_mode='HTML'
                )
            else:
                if client.chat_id in user.profilelikes.unviewed + user.profilelikes.viewed:
                    text = '–í—ã —É–∂–µ –ª–∞–π–∫–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n'
                    self.bot.send_message(
                        chat_id=client.chat_id,
                        text=text,
                        parse_mode='HTML'
                    )
                else:
                    user.profilelikes.unviewed.append(client.chat_id)
                    user.profilelikes.save()

                    self.bot.send_message(
                        chat_id=user.chat_id,
                        text='–í–∞—Å –ª–∞–π–∫–Ω—É–ª–∏ !!!',
                        parse_mode='HTML'
                    )
                    if flag == '0':
                        self.get_next_search_profile(client)
                    else:
                        self.get_next_like_profile(client)
        elif pref == 'action_dislike':
            if user_id in client.profilelikes.unviewed:
                client.profilelikes.unviewed.remove(user_id)
            if client.chat_id in user.profilelikes.unviewed:
                user.profilelikes.unviewed.remove(client.chat_id)
            if client.chat_id in user.profilelikes.viewed:
                user.profilelikes.viewed.remove(client.chat_id)
            self.bot.send_message(
                chat_id=client.chat_id,
                text='–¢–æ–≥–¥–∞ —Å–º–æ—Ç—Ä–∏–º –¥–∞–ª—å—à–µ...',
                parse_mode='HTML'
            )
            client.profilelikes.save()
            user.profilelikes.save()
            if flag == '0':
                self.get_next_search_profile(client)
            else:
                self.get_next_like_profile(client)

    @log
    def get_next_like_profile(self, client):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫
        :param User client: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞
        :raise IndexError: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–∏—Å–∫–∞
        """
        try:
            user_id = client.profilelikes.unviewed[0]
            # print(user_id)
            dop_text = f'<b>–≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –ª–∞–π–∫–Ω—É–ª –≤–∞—Å</b>\n'
            self.show_user_profile_likes(client, user_id, '1', dop_text)

        except IndexError:
            text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–∏–∫–æ–≥–æ <b>–Ω–µ –Ω–∞—à–ª–∏</b>\n'
            text += '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å, –∫—Ç–æ-–Ω–∏–±—É–¥—å –¥–∞ –ª–∞–π–∫–Ω–µ—Ç'
            self.bot.send_message(
                chat_id=client.chat_id,
                text=text,
                parse_mode='HTML'
            )

    @log
    def show_user_profile_likes(self, client, user_id, flag, dop_text):
        """–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–ª–∏ –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
        :param User client: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞
        :param Str user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω
        :param Str flag: –ï—Å–ª–∏ '1' - –ø–æ –ª–∞–π–∫–∞–º, '0' - –ø–æ–∏—Å–∫
        :param Str dop_text: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        user = User.objects.get(chat_id=user_id)
        text = f'<b>üë§–ò–º—è: </b>{user.profile.name}\n'
        text += f'<b>üî¢–í–æ–∑—Ä–∞—Å—Ç: </b>{user.profile.age}\n'
        if user.profile.sex == 'M':
            text += '<b>üöπ–ü–æ–ª: </b> –ú—É–∂—á–∏–Ω–∞\n'
        elif user.profile.sex == 'W':
            text += '<b>üö∫–ü–æ–ª: </b> –ñ–µ–Ω—â–∏–Ω–∞\n'
        elif user.profile.sex == 'O':
            text += '<b>–ü–æ–ª: </b> –ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω\n'

        text += f'<b>üñåÔ∏è–û–ø–∏—Å–∞–Ω–∏–µ: </b>{user.profile.description}\n\n'
        text += dop_text
        markup = types.InlineKeyboardMarkup()
        markup.row_width = 1
        markup.add(
            types.InlineKeyboardButton(
                text='üëçüèª',
                callback_data=f'action_like {flag} {str(user_id)}'
            ),
            types.InlineKeyboardButton(
                text='üëéüèª',
                callback_data=f'action_dislike {flag} {str(user_id)}'
            )
        )
        self.bot.send_photo(
            chat_id=client.chat_id,
            photo=self.get_user_avatar(user),
            caption=text,
            reply_markup=markup,
            parse_mode='HTML'
        )